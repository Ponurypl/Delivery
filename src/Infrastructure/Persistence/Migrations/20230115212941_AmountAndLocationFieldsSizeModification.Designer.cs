// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MultiProject.Delivery.Infrastructure.Persistence;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MultiProject.Delivery.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230115212941_AmountAndLocationFieldsSizeModification")]
    partial class AmountAndLocationFieldsSizeModification
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MultiProject.Delivery.Domain.Attachments.Entities.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("attachment_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalInformation")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("additional_information");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id")
                        .HasComment("id from table users");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_update");

                    b.Property<byte[]>("Payload")
                        .HasColumnType("bytea")
                        .HasColumnName("payload");

                    b.Property<int?>("ScanId")
                        .HasColumnType("integer")
                        .HasColumnName("scan_id")
                        .HasComment("id from table scans");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status")
                        .HasComment("0 - Valid, 1 - Deleted");

                    b.Property<int>("TransportId")
                        .HasColumnType("integer")
                        .HasColumnName("transport_id")
                        .HasComment("id from table transports");

                    b.Property<int?>("TransportUnitId")
                        .HasColumnType("integer")
                        .HasColumnName("transport_unit_id")
                        .HasComment("id from table transport_units");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ScanId");

                    b.HasIndex("TransportId");

                    b.HasIndex("TransportUnitId");

                    b.ToTable("attachments", (string)null);
                });

            modelBuilder.Entity("MultiProject.Delivery.Domain.Deliveries.Entities.MultiUnitDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("multi_unit_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasPrecision(8, 3)
                        .HasColumnType("double precision")
                        .HasColumnName("amount")
                        .HasComment("amount to be delivered, depends on type of unit of measure for example it can be pieces/kilograms/meters etc.");

                    b.Property<int>("UnitOfMeasureId")
                        .HasColumnType("integer")
                        .HasColumnName("unit_of_measure_id")
                        .HasComment("id from table units_of_measure");

                    b.HasKey("Id");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("multi_units_details", (string)null);
                });

            modelBuilder.Entity("MultiProject.Delivery.Domain.Deliveries.Entities.Transport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("transport_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalInformation")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("additional_information");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<Guid>("DelivererId")
                        .HasColumnType("uuid")
                        .HasColumnName("deliverer_id")
                        .HasComment("id from table users. This user will deliver units to recipients and unload them");

                    b.Property<Guid>("ManagerId")
                        .HasColumnType("uuid")
                        .HasColumnName("manager_id")
                        .HasComment("id from table users. This user is responsible for this transport, and a contact person for deliverer in case of any problems");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("number");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status")
                        .HasComment("Transport status 0 - New, 1 - Processing, 2 - Finished, 3 - Deleted");

                    b.Property<double?>("TotalWeight")
                        .HasPrecision(9, 4)
                        .HasColumnType("double precision")
                        .HasColumnName("total_weight");

                    b.HasKey("Id");

                    b.HasIndex("DelivererId");

                    b.HasIndex("ManagerId");

                    b.ToTable("transports", (string)null);
                });

            modelBuilder.Entity("MultiProject.Delivery.Domain.Deliveries.Entities.TransportUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("transport_unit_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalInformation")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("additional_information");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("number");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status")
                        .HasComment("Transport unit status 1 - New, 2 - PartiallyDelivered, 3 - Delivered, 4 - Deleted");

                    b.Property<int?>("multi_unit_id")
                        .HasColumnType("integer");

                    b.Property<int>("transport_id")
                        .HasColumnType("integer");

                    b.Property<int?>("unique_unit_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("multi_unit_id")
                        .IsUnique();

                    b.HasIndex("transport_id");

                    b.HasIndex("unique_unit_id")
                        .IsUnique();

                    b.ToTable("transport_units", (string)null);
                });

            modelBuilder.Entity("MultiProject.Delivery.Domain.Deliveries.Entities.UniqueUnitDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("unique_unit_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("barcode");

                    b.Property<int>("transport_unit_id")
                        .HasColumnType("integer")
                        .HasComment("id from table transport_units");

                    b.HasKey("Id");

                    b.ToTable("unique_units_details", (string)null);
                });

            modelBuilder.Entity("MultiProject.Delivery.Domain.Dictionaries.Entities.UnitOfMeasure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("unit_of_measure_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("symbol")
                        .HasComment("symbol that will be presented to users eg. Kg");

                    b.HasKey("Id");

                    b.ToTable("units_of_measure", (string)null);
                });

            modelBuilder.Entity("MultiProject.Delivery.Domain.Scans.Entities.Scan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("scan_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("DelivererId")
                        .HasColumnType("uuid")
                        .HasColumnName("deliverer_id")
                        .HasComment("id from table users. Designates who created this scan");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_update_date");

                    b.Property<double?>("Quantity")
                        .HasPrecision(8, 3)
                        .HasColumnType("double precision")
                        .HasColumnName("quantity")
                        .HasComment("unloaded quantity from multi_unit, null for unique_unit type of transport unit delivery");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status")
                        .HasComment("scan status 0 - Valid, 1 - Deleted");

                    b.Property<int>("TransportUnitId")
                        .HasColumnType("integer")
                        .HasColumnName("transport_unit_id")
                        .HasComment("id from table transport_units");

                    b.HasKey("Id");

                    b.HasIndex("DelivererId");

                    b.HasIndex("TransportUnitId");

                    b.ToTable("scans", (string)null);
                });

            modelBuilder.Entity("MultiProject.Delivery.Domain.Users.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("active")
                        .HasComment("Is user active or inactive, inactive users cannot log in, and be assigned to new deliveries.");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("password")
                        .HasComment("password hash");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phone_number")
                        .HasComment("user phone number without whitespaces or separators");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role")
                        .HasComment("What roles has user assigned (bit field) 0 - no role, 1 - Deliverer, 2 - Manager");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("username")
                        .HasComment("username and login");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("MultiProject.Delivery.Domain.Attachments.Entities.Attachment", b =>
                {
                    b.HasOne("MultiProject.Delivery.Domain.Users.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MultiProject.Delivery.Domain.Scans.Entities.Scan", null)
                        .WithMany()
                        .HasForeignKey("ScanId");

                    b.HasOne("MultiProject.Delivery.Domain.Deliveries.Entities.Transport", null)
                        .WithMany()
                        .HasForeignKey("TransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MultiProject.Delivery.Domain.Deliveries.Entities.TransportUnit", null)
                        .WithMany()
                        .HasForeignKey("TransportUnitId");
                });

            modelBuilder.Entity("MultiProject.Delivery.Domain.Deliveries.Entities.MultiUnitDetails", b =>
                {
                    b.HasOne("MultiProject.Delivery.Domain.Dictionaries.Entities.UnitOfMeasure", null)
                        .WithMany()
                        .HasForeignKey("UnitOfMeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MultiProject.Delivery.Domain.Deliveries.Entities.Transport", b =>
                {
                    b.HasOne("MultiProject.Delivery.Domain.Users.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("DelivererId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MultiProject.Delivery.Domain.Users.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MultiProject.Delivery.Domain.Deliveries.Entities.TransportUnit", b =>
                {
                    b.HasOne("MultiProject.Delivery.Domain.Deliveries.Entities.MultiUnitDetails", "MultiUnitDetails")
                        .WithOne("TransportUnit")
                        .HasForeignKey("MultiProject.Delivery.Domain.Deliveries.Entities.TransportUnit", "multi_unit_id");

                    b.HasOne("MultiProject.Delivery.Domain.Deliveries.Entities.Transport", "Transport")
                        .WithMany("TransportUnits")
                        .HasForeignKey("transport_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MultiProject.Delivery.Domain.Deliveries.Entities.UniqueUnitDetails", "UniqueUnitDetails")
                        .WithOne("TransportUnit")
                        .HasForeignKey("MultiProject.Delivery.Domain.Deliveries.Entities.TransportUnit", "unique_unit_id");

                    b.OwnsOne("MultiProject.Delivery.Domain.Deliveries.ValueTypes.Recipient", "Recipient", b1 =>
                        {
                            b1.Property<int>("TransportUnitId")
                                .HasColumnType("integer");

                            b1.Property<string>("CompanyName")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("recipient_company_name");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("recipient_country");

                            b1.Property<string>("FlatNumber")
                                .HasMaxLength(5)
                                .HasColumnType("character varying(5)")
                                .HasColumnName("recipient_flat_number");

                            b1.Property<string>("LastName")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("recipient_last_name");

                            b1.Property<string>("Name")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("recipient_name");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("character varying(15)")
                                .HasColumnName("recipient_phone_number")
                                .HasComment("phone number without whitespaces or separators");

                            b1.Property<string>("PostCode")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("recipient_post_code");

                            b1.Property<string>("Street")
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("recipient_street");

                            b1.Property<string>("StreetNumber")
                                .IsRequired()
                                .HasMaxLength(5)
                                .HasColumnType("character varying(5)")
                                .HasColumnName("recipient_street_number");

                            b1.Property<string>("Town")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("recipient_town");

                            b1.HasKey("TransportUnitId");

                            b1.ToTable("transport_units");

                            b1.WithOwner()
                                .HasForeignKey("TransportUnitId");
                        });

                    b.Navigation("MultiUnitDetails");

                    b.Navigation("Recipient")
                        .IsRequired();

                    b.Navigation("Transport");

                    b.Navigation("UniqueUnitDetails");
                });

            modelBuilder.Entity("MultiProject.Delivery.Domain.Scans.Entities.Scan", b =>
                {
                    b.HasOne("MultiProject.Delivery.Domain.Users.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("DelivererId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MultiProject.Delivery.Domain.Deliveries.Entities.TransportUnit", null)
                        .WithMany()
                        .HasForeignKey("TransportUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("MultiProject.Delivery.Domain.Common.ValueTypes.Geolocation", "Location", b1 =>
                        {
                            b1.Property<int>("ScanId")
                                .HasColumnType("integer");

                            b1.Property<double>("Accuracy")
                                .HasPrecision(3)
                                .HasColumnType("double precision")
                                .HasColumnName("location_accuracy")
                                .HasComment("level of accuracy for longitude and latitude in meters");

                            b1.Property<double>("Latitude")
                                .HasPrecision(8, 5)
                                .HasColumnType("double precision")
                                .HasColumnName("location_latitude")
                                .HasComment("Latitude of scan, with precision up to 1m");

                            b1.Property<double>("Longitude")
                                .HasPrecision(8, 5)
                                .HasColumnType("double precision")
                                .HasColumnName("location_longitude")
                                .HasComment("Longitude of scan, with precision up to 1m");

                            b1.HasKey("ScanId");

                            b1.ToTable("scans");

                            b1.WithOwner()
                                .HasForeignKey("ScanId");
                        });

                    b.Navigation("Location");
                });

            modelBuilder.Entity("MultiProject.Delivery.Domain.Users.Entities.User", b =>
                {
                    b.OwnsOne("MultiProject.Delivery.Domain.Common.ValueTypes.AdvancedGeolocation", "Location", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<double>("Accuracy")
                                .HasPrecision(3)
                                .HasColumnType("double precision")
                                .HasColumnName("geolocation_accuracy")
                                .HasComment("level of accuracy of longitude and latitude in meters. Can be null if speed is 0");

                            b1.Property<double>("Heading")
                                .HasPrecision(5, 2)
                                .HasColumnType("double precision")
                                .HasColumnName("geolocation_heading")
                                .HasComment("user last known heading in degrees where 0 is north");

                            b1.Property<DateTime>("LastUpdateDate")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("geolocation_last_update")
                                .HasComment("last date of geolocation update");

                            b1.Property<double>("Latitude")
                                .HasPrecision(8, 5)
                                .HasColumnType("double precision")
                                .HasColumnName("geolocation_latitude")
                                .HasComment("user last known latitude, with precision up to 1m");

                            b1.Property<double>("Longitude")
                                .HasPrecision(8, 5)
                                .HasColumnType("double precision")
                                .HasColumnName("geolocation_longitude")
                                .HasComment("user last known longitude, with precision up to 1m");

                            b1.Property<double>("Speed")
                                .HasPrecision(6, 2)
                                .HasColumnType("double precision")
                                .HasColumnName("geolocation_speed")
                                .HasComment("user last known speed in m/s");

                            b1.HasKey("UserId");

                            b1.ToTable("users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Location");
                });

            modelBuilder.Entity("MultiProject.Delivery.Domain.Deliveries.Entities.MultiUnitDetails", b =>
                {
                    b.Navigation("TransportUnit")
                        .IsRequired();
                });

            modelBuilder.Entity("MultiProject.Delivery.Domain.Deliveries.Entities.Transport", b =>
                {
                    b.Navigation("TransportUnits");
                });

            modelBuilder.Entity("MultiProject.Delivery.Domain.Deliveries.Entities.UniqueUnitDetails", b =>
                {
                    b.Navigation("TransportUnit")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
